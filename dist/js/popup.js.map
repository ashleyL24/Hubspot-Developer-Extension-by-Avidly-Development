{"version":3,"file":"js/popup.js","mappings":";;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAlBA;AAAA;AAAA;;AAoBA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAvDA;AAAA;AAAA;;AAyDA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAFA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAjCA;AAAA;AAAA;AAmCA;AAGA","sources":["webpack://hubspot-developer-extension/./src/js/popup.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", () => {\n  // Tab switching functionality\n  const tabs = document.querySelectorAll(\".tab-btn\");\n  const contents = document.querySelectorAll(\".tab-content\");\n\n  tabs.forEach((tab) => {\n    tab.addEventListener(\"click\", () => {\n      // Remove active class from all tabs and contents\n      tabs.forEach((t) => t.classList.remove(\"active\"));\n      contents.forEach((c) => c.classList.remove(\"active\"));\n\n      // Add active class to clicked tab and corresponding content\n      tab.classList.add(\"active\");\n      const tabId = tab.getAttribute(\"data-tab\");\n      document.getElementById(tabId).classList.add(\"active\");\n    });\n  });\n\n  // URL modification functionality\n  const modifyUrl = async (params) => {\n    const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n    const currentTab = tabs[0];\n\n    // if (!currentTab.url.includes('hubspot.com')) {\n    //     alert('This tool can only be used on HubSpot domains.');\n    //     return;\n    // }\n\n    const url = new URL(currentTab.url);\n\n    // Update or add each parameter\n    Object.entries(params).forEach(([key, value]) => {\n      url.searchParams.set(key, value);\n    });\n\n    // Update the URL and reload the page\n    await chrome.tabs.update(currentTab.id, { url: url.toString() });\n  };\n\n  // Generate random 4-digit number\n  const generateRandomNumber = () => {\n    return Math.floor(1000 + Math.random() * 9000);\n  };\n\n  // Button click handlers\n  document.getElementById(\"bypassCache\").addEventListener(\"click\", () => {\n    modifyUrl({ hsCacheBuster: generateRandomNumber() });\n    window.close();\n  });\n\n  document.getElementById(\"enableDebug\").addEventListener(\"click\", () => {\n    modifyUrl({ hsDebug: \"true\" });\n    window.close();\n  });\n\n  document.getElementById(\"showDebugOnly\").addEventListener(\"click\", () => {\n    modifyUrl({ hsDebugOnly: \"true\" });\n    window.close();\n  });\n\n  document.getElementById(\"activateDev\").addEventListener(\"click\", () => {\n    modifyUrl({ developerMode: \"true\" });\n    window.close();\n  });\n\n  document.getElementById(\"viewAmp\").addEventListener(\"click\", () => {\n    modifyUrl({ hs_amp: \"true\" });\n    window.close();\n  });\n\n  // Language switcher functionality\n  const setupLanguageSwitcher = async () => {\n    const langSelect = document.getElementById(\"langSelect\");\n    const switchLangBtn = document.getElementById(\"switchLang\");\n    const langMessage = document.getElementById(\"langMessage\");\n\n    try {\n      // Inject content script if not already injected\n      await chrome.scripting.executeScript({\n        target: { tabId: (await chrome.tabs.query({ active: true, currentWindow: true }))[0].id },\n        files: [\"js/content.js\"],\n      });\n\n      // Get available languages\n      const response = await chrome.tabs.sendMessage(\n        (await chrome.tabs.query({ active: true, currentWindow: true }))[0].id,\n        { action: \"getLanguages\" }\n      );\n\n      if (response && response.languages && response.languages.length > 0) {\n        // Clear any existing options\n        langSelect.innerHTML = '<option value=\"\">Select Language</option>';\n\n        // Add available languages\n        response.languages.forEach((lang) => {\n          const option = document.createElement(\"option\");\n          option.value = lang;\n          option.textContent = new Intl.DisplayNames([\"en\"], { type: \"language\" }).of(lang);\n          if (lang === response.currentLanguage) {\n            option.selected = true;\n          }\n          langSelect.appendChild(option);\n        });\n\n        // Enable controls\n        langSelect.disabled = false;\n        switchLangBtn.disabled = false;\n        if (langMessage) langMessage.style.display = \"none\";\n      } else {\n        // Disable controls and show message\n        langSelect.disabled = true;\n        switchLangBtn.disabled = true;\n        if (langMessage) {\n          langMessage.textContent = \"No language options available on this page\";\n          langMessage.style.display = \"block\";\n        }\n      }\n    } catch (error) {\n      console.error(\"Error setting up language switcher:\", error);\n      langSelect.disabled = true;\n      switchLangBtn.disabled = true;\n      if (langMessage) {\n        langMessage.textContent = \"Unable to detect available languages\";\n        langMessage.style.display = \"block\";\n      }\n    }\n  };\n\n  // Initialize language switcher\n  setupLanguageSwitcher();\n\n  // Language switch button handler\n  document.getElementById(\"switchLang\").addEventListener(\"click\", () => {\n    const langSelect = document.getElementById(\"langSelect\");\n    const selectedLang = langSelect.value;\n\n    if (!selectedLang) {\n      alert(\"Please select a language\");\n      return;\n    }\n\n    modifyUrl({ hsLang: selectedLang });\n    window.close();\n  });\n\n  // Design Manager functionality\n  const openDesignManager = async () => {\n    const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n    const currentTab = tabs[0];\n\n    try {\n      // Inject content script\n      await chrome.scripting.executeScript({\n        target: { tabId: currentTab.id },\n        files: [\"js/content.js\"],\n      });\n\n      // Wait a brief moment for the script to initialize\n      await new Promise((resolve) => setTimeout(resolve, 100));\n\n      // Now try to get the portal ID\n      const response = await chrome.tabs.sendMessage(currentTab.id, {\n        action: \"getPortalId\",\n      });\n      if (response && response.portalId) {\n        const designManagerUrl = `https://app.hubspot.com/design-manager/${response.portalId}`;\n        await chrome.tabs.create({ url: designManagerUrl });\n        window.close();\n      } else {\n        alert(\n          \"Could not find portal ID on this page. Please make sure you are on a HubSpot page.\"\n        );\n      }\n    } catch (error) {\n      console.error(\"Error accessing portal ID:\", error);\n      alert(\n        \"Could not access page information. Please make sure you are on a HubSpot page.\"\n      );\n    }\n  };\n\n  document\n    .getElementById(\"designManager\")\n    .addEventListener(\"click\", openDesignManager);\n});\n"],"names":[],"sourceRoot":""}
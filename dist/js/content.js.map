{"version":3,"file":"js/content.js","mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA","sources":["webpack://hubspot-developer-extension/./src/js/content.js"],"sourcesContent":["/**\n * Injects a function into the page context to safely access HubSpot variables\n * This is necessary because content scripts run in an isolated context\n */\nfunction injectGetPageInfo() {\n    if (typeof window.getHsInfo === 'function') {\n        return;\n    }\n    \n    const script = document.createElement('script');\n    script.textContent = `\n        window.getHsInfo = function() {\n            try {\n                return {\n                    portalId: window.hsVars ? window.hsVars.portal_id : null,\n                    currentLanguage: window.hsVars ? window.hsVars.language : null\n                };\n            } catch (e) {\n                console.warn('Error accessing hsVars:', e);\n                return { portalId: null, currentLanguage: null };\n            }\n        };\n    `;\n    \n    try {\n        document.documentElement.appendChild(script);\n        script.remove();\n    } catch (error) {\n        console.error('Failed to inject script:', error);\n    }\n}\n\n/**\n * Extracts HubSpot portal information and available languages from the current page\n * Uses multiple fallback methods to ensure compatibility across different HubSpot pages\n * @returns {Object} Object containing portalId, languages array, and currentLanguage\n */\nfunction getPageInfo() {\n    const info = {\n        portalId: null,\n        languages: new Set(),\n        currentLanguage: null\n    };\n\n    // Inject the helper function first\n    injectGetPageInfo();\n\n    // Try different methods to access HubSpot variables\n    try {\n        if (typeof window.getHsInfo === 'function') {\n            const hsInfo = window.getHsInfo();\n            if (hsInfo && typeof hsInfo === 'object') {\n                info.portalId = hsInfo.portalId;\n                info.currentLanguage = hsInfo.currentLanguage;\n            }\n        } else if (typeof window.hsVars !== 'undefined' && window.hsVars) {\n            info.portalId = window.hsVars.portal_id || null;\n            info.currentLanguage = window.hsVars.language || null;\n        } else {\n            // Fallback: parse hsVars from script tags (with improved safety)\n            const scripts = document.querySelectorAll('script[type=\"text/javascript\"], script:not([type])');\n            for (const script of scripts) {\n                const content = script.textContent || script.innerText;\n                if (content && content.includes('var hsVars = {')) {\n                    try {\n                        const match = content.match(/var hsVars = (\\{[^}]*\\});?/);\n                        if (match && match[1]) {\n                            let objText = match[1];\n                            // Safer sanitization for JSON parsing\n                            objText = objText\n                                .replace(/([{,]\\s*)(\\w+):/g, '$1\"$2\":')  // quote unquoted keys\n                                .replace(/'([^']*)'/g, '\"$1\"')          // single to double quotes\n                                .replace(/,\\s*}/g, '}')                // remove trailing commas\n                                .replace(/undefined/g, 'null');        // handle undefined values\n                            \n                            const vars = JSON.parse(objText);\n                            if (vars && typeof vars === 'object') {\n                                info.portalId = vars.portal_id || null;\n                                info.currentLanguage = vars.language || null;\n                                break;\n                            }\n                        }\n                    } catch (parseError) {\n                        console.warn('Error parsing hsVars from script tag:', parseError);\n                        continue;\n                    }\n                }\n            }\n        }\n    } catch (error) {\n        console.error('Error accessing HubSpot variables:', error);\n    }\n\n    // Extract available languages from hreflang attributes\n    try {\n        const alternateLinks = document.querySelectorAll('link[rel=\"alternate\"][hreflang]');\n        alternateLinks.forEach(link => {\n            const lang = link.getAttribute('hreflang');\n            if (lang && lang !== 'x-default' && /^[a-z]{2}(-[A-Z]{2})?$/.test(lang)) {\n                info.languages.add(lang);\n            }\n        });\n\n        // Add current language if it's valid\n        if (info.currentLanguage && /^[a-z]{2}(-[A-Z]{2})?$/.test(info.currentLanguage)) {\n            info.languages.add(info.currentLanguage);\n        }\n    } catch (error) {\n        console.warn('Error extracting language information:', error);\n    }\n\n    return {\n        portalId: info.portalId ? String(info.portalId) : null,\n        languages: Array.from(info.languages).sort(),\n        currentLanguage: info.currentLanguage\n    };\n}\n\n/**\n * Message listener for communication with the extension popup\n * Handles requests for portal ID and language information\n */\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    try {\n        if (!request || typeof request.action !== 'string') {\n            sendResponse({ error: 'Invalid request format' });\n            return false;\n        }\n\n        switch (request.action) {\n            case 'getPortalId':\n                try {\n                    const info = getPageInfo();\n                    sendResponse({ \n                        portalId: info.portalId,\n                        success: true\n                    });\n                } catch (error) {\n                    console.error('Error getting portal ID:', error);\n                    sendResponse({ \n                        portalId: null, \n                        error: 'Failed to retrieve portal ID',\n                        success: false\n                    });\n                }\n                break;\n\n            case 'getLanguages':\n                try {\n                    const info = getPageInfo();\n                    sendResponse({\n                        languages: info.languages,\n                        currentLanguage: info.currentLanguage,\n                        success: true\n                    });\n                } catch (error) {\n                    console.error('Error getting languages:', error);\n                    sendResponse({ \n                        languages: [], \n                        currentLanguage: null,\n                        error: 'Failed to retrieve language information',\n                        success: false\n                    });\n                }\n                break;\n\n            default:\n                sendResponse({ error: `Unknown action: ${request.action}` });\n                return false;\n        }\n        \n        return true; // Keep the message channel open for async response\n    } catch (error) {\n        console.error('Error in message listener:', error);\n        sendResponse({ error: 'Internal error processing request' });\n        return false;\n    }\n});"],"names":[],"sourceRoot":""}